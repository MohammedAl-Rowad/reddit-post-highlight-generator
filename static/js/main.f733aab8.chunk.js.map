{"version":3,"sources":["features/redditData/funcs.ts","features/redditData/redditDataSlice.ts","features/redditData/selectors.ts","ui/post/Post.tsx","features/redditData/RedditPost.tsx","features/postLinkInput/PostLinkInput.tsx","features/postLinkInput/postLinkInputSlice.ts","features/postLinkInput/selectors.ts","ui/customAppBar/CustomAppBar.tsx","App.tsx","app/store.ts","serviceWorker.ts","theme/index.ts","index.tsx"],"names":["mapRedditResponse","list01","list02","subRedditInfo","getSubRedditInfo","comments","getTopComments","data","children","map","subredditNamePrefixed","subreddit_name_prefixed","author","url","title","body","numComments","num_comments","linkUrl","checkURLIfForImage","url_overridden_by_dest","thumbnail","imgUrl","match","fetchRedditData","createAsyncThunk","link","a","axios","get","redditDataSlice","createSlice","name","initialState","subRedditAbout","status","reducers","addSubRedditAbout","state","payload","extraReducers","fulfilled","pending","rejected","actions","selectStatus","redditData","selectSubRedditInfo","selectComments","slice","selectSubbRedditIconUrl","iconUrl","useStyles","makeStyles","root","backgroundColor","color","media","height","paddingTop","backgroundSize","backgroundRepeat","avatar","reddit","Post","onDownload","isComment","classes","useState","v4","uuid","userImage","setUserImage","onDownloadClick","useCallback","useEffect","then","snoovatar_img","icon_img","Box","mt","Grid","container","spacing","item","xs","md","xl","justify","IconButton","aria-label","size","onClick","ImageRounded","Card","className","id","CardHeader","Avatar","src","href","rel","target","action","LinkRounded","subheader","CardContent","Typography","variant","component","CardMedia","image","memo","RedditPost","subRedditData","useSelector","dispatch","useDispatch","html2canvas","document","getElementById","letterRendering","useCORS","logging","canvas","saveAs","toDataURL","comment","PostLinkInput","storeLink","selectLink","httpStatus","error","setError","addLinkToStore","useDebouncedCallback","text","isUri","addLink","display","TextField","fullWidth","helperText","onChange","value","callback","InputProps","startAdornment","InputAdornment","position","Reddit","ml","Tooltip","Fab","toast","promise","loading","success","Error","disabled","EmojiNatureRounded","Chip","label","icon","ErrorRounded","postLinkInputSlice","parse","origin","pathname","postLinkInput","CustomAppBar","AppBar","Toolbar","App","store","configureStore","reducer","postLinkInputReducer","redditDataReducer","Boolean","window","location","hostname","createMuiTheme","palette","type","primary","main","secondary","red","background","default","overrides","MuiTextField","borderColor","ReactDOM","render","StrictMode","ThemeProvider","theme","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f733aab8.chunk.js","sourcesContent":["export const mapRedditResponse = ([list01, list02]: Array<object>) => {\n  return {\n    subRedditInfo: getSubRedditInfo(list01),\n    comments: getTopComments(list02),\n  }\n}\n\nconst getSubRedditInfo = ({ data: { children } }: any) => {\n  const [mappedChildren] = children.map(({ data }: any) => ({\n    subredditNamePrefixed: data.subreddit_name_prefixed,\n    author: data.author,\n    url: data.url,\n    title: data.title,\n    body: data.body,\n    numComments: data.num_comments,\n    linkUrl: checkURLIfForImage(data.url_overridden_by_dest || data.thumbnail)\n      ? null\n      : data.url_overridden_by_dest,\n    imgUrl: checkURLIfForImage(data.url_overridden_by_dest || data.thumbnail)\n      ? data.url_overridden_by_dest || data.thumbnail\n      : null,\n  }))\n  return mappedChildren\n}\n\nconst getTopComments = ({ data: { children } }: any) => {\n  const mappedChildren = children.map(({ data }: any) => ({\n    body: data.body,\n    author: data.author,\n  }))\n  return mappedChildren\n}\n\nconst checkURLIfForImage = (url: string) =>\n  url.match(/\\.(jpeg|jpg|gif|png)$/) !== null\n","import {\n  createSlice,\n  createAsyncThunk,\n  PayloadAction,\n  AsyncThunk,\n} from '@reduxjs/toolkit'\nimport { HTTP_STATUS } from 'types'\nimport axios from 'axios'\nimport { mapRedditResponse } from './funcs'\nimport { redditDataReducer } from '.'\n\nexport const fetchRedditData: AsyncThunk<\n  Promise<object>,\n  string,\n  object\n> = createAsyncThunk<Promise<object>, string, object>(\n  'reddit/fetchRedditData',\n  async (link: string): Promise<any> => {\n    const { data } = await axios.get(`${link}.json`)\n    return mapRedditResponse(data)\n  }\n)\n\ninterface redditDataState {\n  data: any\n  subRedditAbout: any\n  status: HTTP_STATUS | null\n}\n\nconst initialState: redditDataState = {\n  data: {},\n  subRedditAbout: {},\n  status: null,\n}\n\nconst redditDataSlice = createSlice({\n  name: 'redditData',\n  initialState,\n  reducers: {\n    addSubRedditAbout(state, { payload }: PayloadAction<any>) {\n      state.subRedditAbout = payload\n    },\n  },\n  extraReducers: {\n    [fetchRedditData.fulfilled as any](state, { payload }: PayloadAction) {\n      state.data = payload\n      state.status = 'SUCCESS'\n    },\n    [fetchRedditData.pending as any](state) {\n      state.status = 'PENDING'\n    },\n    [fetchRedditData.rejected as any](state) {\n      state.status = 'FAILED'\n    },\n  },\n})\n\nexport const { addSubRedditAbout } = redditDataSlice.actions\n\nexport default redditDataSlice.reducer\n","import { RootState } from 'app/store'\n\nexport const selectStatus = (state: RootState) => state.redditData.status\nexport const selectSubRedditInfo = (state: RootState) =>\n  state.redditData.data.subRedditInfo\n\nexport const selectComments = (state: RootState) =>\n  state.redditData.data.comments?.slice(0, 10)\n\nexport const selectSubbRedditIconUrl = (state: RootState) =>\n  state.redditData.subRedditAbout.iconUrl\n","import React, { memo, useState, useCallback, useEffect } from 'react'\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  IconButton,\n  CardMedia,\n  Box,\n  CardHeader,\n  Avatar,\n  makeStyles,\n} from '@material-ui/core'\nimport {\n  LinkRounded as LinkRoundedIcon,\n  ImageRounded as ImageRoundedIcon,\n} from '@material-ui/icons'\nimport { v4 } from 'uuid'\nimport axios from 'axios'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    backgroundColor: '#1A1A1B',\n    color: '#D7DADC',\n    '& *': {\n      color: '#D7DADC',\n    },\n  },\n  media: {\n    height: '40vh',\n    paddingTop: '56.25%', // 16:9\n    backgroundSize: 'contain',\n    backgroundRepeat: 'no-repeat',\n  },\n  avatar: {\n    backgroundColor: '#149EF0',\n  },\n}))\n\ninterface Props {\n  onDownload: (uuid: string) => void\n  iconUrl?: string\n  subredditNamePrefixed: string\n  linkUrl: string\n  author: string\n  title: string\n  imgUrl?: string\n  isComment?: boolean\n}\nconst reddit = 'https://www.reddit.com'\n\nconst Post = ({\n  onDownload,\n  iconUrl,\n  subredditNamePrefixed,\n  linkUrl,\n  author,\n  title,\n  imgUrl,\n  isComment = false,\n}: Props) => {\n  const classes = useStyles()\n  const [uuid] = useState(v4())\n  const [userImage, setUserImage] = useState('')\n  const onDownloadClick = useCallback(() => onDownload(uuid), [\n    uuid,\n    onDownload,\n  ])\n  useEffect(() => {\n    if (isComment) {\n      axios\n        .get(`${reddit}/user/${author}/about/.json`)\n        .then(({ data: { data } }: any) => {\n          setUserImage(data.snoovatar_img || data.icon_img)\n        })\n    }\n  }, [isComment])\n\n  return (\n    <Box mt={4}>\n      <Grid container spacing={1}>\n        <Grid item xs={12} md={3} xl={3} justify=\"flex-end\" container>\n          <Box>\n            <IconButton\n              aria-label=\"download\"\n              size=\"medium\"\n              onClick={onDownloadClick}\n            >\n              <ImageRoundedIcon />\n            </IconButton>\n          </Box>\n        </Grid>\n        <Grid item xs={12} md={6} xl={6}>\n          <Card className={classes.root} id={uuid}>\n            <CardHeader\n              avatar={\n                <Avatar\n                  aria-label=\"recipe\"\n                  className={classes.avatar}\n                  src={iconUrl || userImage}\n                >\n                  {isComment ? 'U' : 'R'}\n                </Avatar>\n              }\n              title={\n                isComment ? (\n                  <a\n                    href={`${reddit}/u/${author}`}\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >{`u/${author}`}</a>\n                ) : (\n                  subredditNamePrefixed\n                )\n              }\n              action={\n                !!linkUrl && (\n                  <IconButton aria-label=\"settings\">\n                    <LinkRoundedIcon />\n                  </IconButton>\n                )\n              }\n              subheader={\n                isComment ? (\n                  ''\n                ) : (\n                  <a\n                    href={`${reddit}/u/${author}`}\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >{`u/${author}`}</a>\n                )\n              }\n            />\n            <CardContent>\n              <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\n                {title}\n              </Typography>\n            </CardContent>\n            {!!imgUrl && <CardMedia className={classes.media} image={imgUrl} />}\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={3} xl={3}></Grid>\n      </Grid>\n    </Box>\n  )\n}\n\nexport default memo(Post)\n","import React, { useEffect, useCallback } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  selectSubRedditInfo,\n  addSubRedditAbout,\n  selectSubbRedditIconUrl,\n  selectComments,\n} from 'features/redditData'\nimport axios from 'axios'\nimport { saveAs } from 'file-saver'\nimport html2canvas from 'html2canvas'\nimport { Post } from 'ui/post'\nimport { v4 } from 'uuid'\n\nconst reddit = 'https://www.reddit.com'\n\nconst RedditPost = () => {\n  const subRedditData = useSelector(selectSubRedditInfo)\n  const comments = useSelector(selectComments)\n  const iconUrl = useSelector(selectSubbRedditIconUrl)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (subRedditData) {\n      axios\n        .get(`${reddit}/${subRedditData.subredditNamePrefixed}/about/.json`)\n        .then(({ data: { data } }: any) => {\n          dispatch(addSubRedditAbout({ iconUrl: data.icon_img }))\n        })\n    }\n  }, [subRedditData])\n\n  const onDownload = useCallback((uuid: string) => {\n    html2canvas(document.getElementById(uuid) as HTMLElement, {\n      letterRendering: true,\n      // allowTaint: true,\n      useCORS: true,\n      logging: true,\n    }).then((canvas) => {\n      saveAs(canvas.toDataURL(), `${v4()}.png`)\n    })\n  }, [])\n\n  if (!subRedditData) {\n    return null\n  }\n\n  return (\n    <>\n      <Post\n        onDownload={onDownload}\n        iconUrl={iconUrl}\n        linkUrl={subRedditData.linkUrl}\n        subredditNamePrefixed={subRedditData.subredditNamePrefixed}\n        author={subRedditData.author}\n        title={subRedditData.title}\n        imgUrl={subRedditData.imgUrl}\n      />\n      {comments.map((comment: any) => (\n        <Post\n          key={comments.title}\n          isComment={true}\n          onDownload={onDownload}\n          linkUrl={subRedditData.linkUrl}\n          subredditNamePrefixed={subRedditData.subredditNamePrefixed}\n          author={comment.author}\n          title={comment.body}\n        />\n      ))}\n    </>\n  )\n}\n\nexport default RedditPost\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  Grid,\n  TextField,\n  Box,\n  InputAdornment,\n  Chip,\n  Fab,\n  Tooltip,\n} from '@material-ui/core'\nimport {\n  Reddit as RedditIcon,\n  ErrorRounded as ErrorRoundedIcon,\n  EmojiNatureRounded as EmojiNatureRoundedIcon,\n} from '@material-ui/icons'\nimport { useDebouncedCallback } from 'use-debounce'\nimport { addLink, selectLink } from 'features/postLinkInput'\nimport { fetchRedditData, selectStatus } from 'features/redditData'\nimport { isUri } from 'valid-url'\nimport { toast } from 'react-hot-toast'\nimport { HTTP_STATUS } from 'types'\n\nconst PostLinkInput = () => {\n  const dispatch = useDispatch()\n  const storeLink: string = useSelector(selectLink)\n  const httpStatus: HTTP_STATUS | null = useSelector(selectStatus)\n  const [error, setError] = useState<string>('')\n  const addLinkToStore = useDebouncedCallback((text: string) => {\n    if (isUri(text)) {\n      dispatch(addLink(text))\n      setError('')\n    } else {\n      setError('Not a valid URL!')\n    }\n  }, 300)\n\n  return (\n    <Box mt={4}>\n      <Grid container spacing={1}>\n        <Grid item xs={12} md={4} xl={4}></Grid>\n        <Grid item xs={12} md={4} xl={4}>\n          <Box display=\"flex\">\n            <TextField\n              error={!!error}\n              variant=\"outlined\"\n              fullWidth\n              helperText=\"Paste a link to a reddit post here then hit the button\"\n              onChange={({ target: { value } }) =>\n                addLinkToStore.callback(value)\n              }\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <RedditIcon />\n                  </InputAdornment>\n                ),\n              }}\n            />\n            <Box ml={2}>\n              <Tooltip title=\"Generate Post HighLights\">\n                <span>\n                  <Fab\n                    color=\"primary\"\n                    onClick={() => {\n                      toast.promise(\n                        dispatch(fetchRedditData(storeLink)) as any,\n                        {\n                          loading: <i>Fetching data...</i>,\n                          success: (data: any) => {\n                            if (data.error) {\n                              throw new Error()\n                            } else {\n                              return (\n                                <b>\n                                  <i>Fetched Data</i>\n                                </b>\n                              )\n                            }\n                          },\n                          error: <b>Something went wrong!</b>,\n                        }\n                      )\n                    }}\n                    aria-label=\"Generate Post HighLights\"\n                    disabled={httpStatus === 'PENDING' || !!error || !storeLink}\n                  >\n                    <EmojiNatureRoundedIcon />\n                  </Fab>\n                </span>\n              </Tooltip>\n            </Box>\n          </Box>\n          {!!error && (\n            <Chip\n              label={error}\n              color=\"secondary\"\n              variant=\"outlined\"\n              icon={<ErrorRoundedIcon />}\n            />\n          )}\n        </Grid>\n        <Grid item xs={12} md={4} xl={4}></Grid>\n      </Grid>\n    </Box>\n  )\n}\n\nexport default PostLinkInput\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport parse from 'url-parse'\ninterface postLinkInputState {\n  link: string\n}\n\nconst initialState: postLinkInputState = {\n  link: '',\n}\n\nconst postLinkInputSlice = createSlice({\n  name: 'postLinkInput',\n  initialState,\n  reducers: {\n    addLink(state, { payload: link }: PayloadAction<string>) {\n      const { origin, pathname } = parse(link)\n      state.link = `${origin}${pathname}`\n    },\n  },\n  extraReducers: {},\n})\n\nexport const { addLink } = postLinkInputSlice.actions\n\nexport default postLinkInputSlice.reducer\n","import { RootState } from 'app/store'\n\nexport const selectLink = (state: RootState) => state.postLinkInput.link\n","import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\n\nconst CustomAppBar = () => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\">RPHG</Typography>\n    </Toolbar>\n  </AppBar>\n)\n\nexport default CustomAppBar\n","import React from 'react'\r\nimport { PostLinkInput } from 'features/postLinkInput'\r\nimport { RedditPost } from 'features/redditData'\r\nimport { CustomAppBar } from 'ui/customAppBar'\r\nimport { Toaster } from 'react-hot-toast'\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <CustomAppBar />\r\n      <PostLinkInput />\r\n      <RedditPost />\r\n      <Toaster position=\"top-center\" />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\r\nimport { postLinkInputReducer } from 'features/postLinkInput'\r\nimport { redditDataReducer } from 'features/redditData'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    postLinkInput: postLinkInputReducer,\r\n    redditData: redditDataReducer,\r\n  },\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createMuiTheme, ThemeOptions } from '@material-ui/core/styles'\nimport { red } from '@material-ui/core/colors'\n\n// A custom theme for this app\nexport default createMuiTheme({\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#4E7F97',\n    },\n    secondary: {\n      main: red[500],\n    },\n    error: {\n      main: red[500],\n    },\n    background: {\n      default: '#A60303',\n    },\n  },\n  overrides: {\n    MuiTextField: {\n      root: {\n        color: '#4E7F97',\n        borderColor: '#4E7F97',\n      },\n    },\n  },\n}) as ThemeOptions\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { store } from './app/store'\r\nimport { Provider } from 'react-redux'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\nimport theme from 'theme'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}